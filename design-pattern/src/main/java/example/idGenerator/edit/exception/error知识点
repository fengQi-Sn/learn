1、错误码
方式：放在出参、或者全局变量
推荐：跟异常比，更推荐使用异常，因为异常携带更多的信息

2、返回null值
问题：1、有NPE的风险，2、代码可能有很多null判断，繁琐，而且和业务耦合，影响可读性
特殊情况：对于以 get、find、select、search、query 等单词开头的查找函数来说，数据不存在，并非一种异常情况，这是一种正常行为。
所以，返回代表不存在语义的 NULL 值比返回异常更加合理(如果返回异常，则需要判断异常类型，以区分不存在和其他异常)。最终还是要项目一致。

3、返回空对象，比如空字符串、空集合
可以解决null的问题

4、抛异常
区分正常逻辑和异常逻辑，提高代码的可读性
携带更多的信息
受检异常和非受检异常：
1、受检异常：对于可恢复异常、业务异常（比如提现金额大于余额的异常），我们更倾向于使用受检异常，明确告知调用者需要捕获处理。
1、非受检异常：如果捕获异常无法做进一步的处理，抛出运行时异常。
2、受检异常的缺点：1、使函数的定义变长，影响可读性，可用性。2、而且要显示处理，实现繁琐。3、违反开闭原则，如果新增一个受检异常，则所有调用方都需要修改，知道某个函数捕捉处理为止
3、非受检异常的缺点：1、需要查看代码才知道具体会抛出什么异常。2、程序员可能会漏处理一些本应该捕获处理的异常
4、处理：1、吞掉(如果 func1() 抛出的异常是可以恢复，且 func2() 的调用方并不关心此异常，我们完全可以在 func2() 内将 func1() 抛出的异常吞掉)。2、原封不动地 re-throw（如果 func1() 抛出的异常对 func2() 的调用方来说，也是可以理解的、关心的 ，并且在业务概念上有一定的相关性，我们可以选择直接将 func1 抛出的异常 re-throw）。3、包装成新的异常 re-throw（如果 func1() 抛出的异常太底层，对 func2() 的调用方来说，缺乏背景去理解、且业务概念上无关，我们可以将它重新包装成调用方可以理解的新异常，然后 re-throw）












